language: node_js

node_js:
  - 0.12
  
build:
  ci:
    - echo $JOB_TRIGGERED_BY_NAME
    - echo $COMMIT
    - FOO="my image resource"
    - echo $FOO

integrations:
  notifications:
    - integrationName: ms_slack   
      type: slack
      recipients:
        - "#cs"
      on_success: always  


resources:
  - name: myGitrepo
    type: gitRepo
    integration: github-manishas
    versionTemplate:     
      sourceName: devops-recipes/build_alpine_ci_image
      branch: master
    buildOnCommit: true
    buildOnTagPush: true

  - name: thisGitrepo
    type: gitRepo
    integration: github-manishas
    versionTemplate:     
      sourceName: manishas/test_runsh_custom_img
      branch: master

  - name: myImg
    type: image
    integration: manishas-dh
    versionTemplate:
      sourceName: foo/bar
      versionName: hardcodedtag 

  - name: myEnv
    type: params
    versionTemplate:
      params:
        username: tbd
        password: tbd
  
  - name: myAWS
    type: integration
    integration: dummyInt  

  - name: myECR
    type: integration
    integration: manishas-ecr 

  - name: slack_notif
    type: notification
    integration: ms_slack
    versionTemplate:
      recipients:
        - "#cs"  # Replace with the Slack room name you want

jobs:
  - name: use_custom_image
    type: runSh
    steps:
      - IN: myGitrepo    # Configuring this as IN automatically logs you into your Docker registry
        switch: off
      - TASK:
          name: build_custom_image
          script:
            - pushd $(shipctl get_resource_state "myGitrepo")
            - docker build -t=devopsrecipes/build_alpine_ci -f Dockerfile.alpine37 --pull .
            - popd
      - TASK:
          name: need_to_use_custom_container
          runtime:
            options:
              imageName: devopsrecipes/build_alpine_ci    # Your image
              imageTag: latest                            # Your image tag  
              pull: false                                 # We already pulled image
              options: --dns=4.4.4.4 --dns=8.8.8.8        # This is optional
          script:
            - echo "Checking runtime values"              # Commands will run in container
            - sudo docker info    

  - name: write_to_params
    type: runSh
    steps:
      - OUT: myEnv
      - TASK:
          runtime:                  
            options:
              env:                  
                - secure: tBAG0ovnUdTQUxCNS8x4KDJsihaEc7sTMiJsJ/hQBaqNpqHKfot6JzNEHKvZvWC33iBTrb52eQbiGnj1RJMItpx+aZ1kUr0MR4HD3xLSnLOljb3G4Sc/3njkJ5T5/XFn4CI1gb2QpTLZQx45RaWC8KCKhsViavKFhN5krDnMdjS6zIoukYj9iKcY014oYx3BpU8KAG1cKANuzA8vDLPUMagDMHi2CNcOGjOu6iIjNYyOxP3GhqsgDKFBUnjvWTCCswXzy/lirOxJiMfgIunSFHr2+Vc7hXnCP+j/mXzhSRkh4IHPe+6PqM1t1E4hhguqrwdrUnHfV6IvMlceC/EZ5g== 
          script:
            - shipctl put_resource_state_multi "myEnv" "username=admin password=admin123"
            - echo $MYTEST
        
  - name: read_from_params
    type: runSh
    steps:
      - IN: myEnv
      - TASK:
          script:
            - echo $username
            - echo $password        

        
  - name: write_file_to_state
    type: runSh
    steps:
      - IN: thisGitrepo
      - TASK:
          script:
            - pushd $(shipctl get_resource_state "thisGitrepo")
            - TRANSFER=$(shipctl get_resource_state write_file_to_state)
            - echo $TRANSFER
            - tar cvfR $TRANSFER/transfer.tar ./testcontent.txt
            - sha1sum $TRANSFER/transfer.tar
            #- cp ./testcontent.txt $TRANSFER/testcontent.txt
            - popd

  - name: read_file_from_state
    type: runSh
    steps:
      - IN: write_file_to_state
      - TASK:
          script:
            - TRANSFER=$(shipctl get_resource_state write_file_to_state)
            - echo $TRANSFER
            - sha1sum $TRANSFER/transfer.tar
            - tar xvf $TRANSFER/transfer.tar
            #- cp $TRANSFER/testcontent.txt ./testcontent.txt
            - cat ./testcontent.txt

  - name: print_dummyInt
    type: runSh
    steps:
      - IN: myAWS  
      - IN: myECR
      - TASK:
          script:
            - MY_ACCESS_KEY=$(shipctl get_integration_resource_field "myAWS" "accessKey")
            - echo $MY_ACCESS_KEY
            - MY_ECR_ACCESS_KEY=$(shipctl get_integration_resource_field "myECR" "aws_access_key_id")
            - echo $MY_ECR_ACCESS_KEY

  - name: test_runsh_custom_img_runCI
    type: runCI
    steps:
      - IN: print_dummyInt
      - OUT: myImg
  
  - name: test_img_sourcename_set
    type: runSh
    steps:
      - TASK:
          script:
            - shipctl put_resource_state_multi myImg "versionName=$BUILD_NUMBER sourceName=manishas/testimg"
      - OUT: myImg
      
  
  - name: test_img_sourcename_get
    type: runSh
    steps:
      - IN: myImg    
      - TASK:
          script:
            - SRCNAME=$(shipctl get_resource_version_key "myImg" "sourceName")
            - echo $SRCNAME
            - VRSNAME=$(shipctl get_resource_version_key "myImg" "versionName")
            - echo $VRSNAME
    on_success:
      script:
        - echo "SUCCESS"
      NOTIFY: slack_notif
